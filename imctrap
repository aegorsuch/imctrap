/*
 * ----------------------------------------------------------------------------
 * "THE BEER-WARE LICENSE" (Revision 42):
 * <aegorsuch@magpiinnovations.com> wrote this file.  As long as you retain this notice you
 * can do whatever you want with this stuff. If we meet some day, and you think
 * this stuff is worth it, you can buy me a beer in return.   Alex Gorsuch
 * ----------------------------------------------------------------------------
 */

#include <SparkFunBME280.h>
#include <SparkFunCCS811.h>

#define CCS811_ADDR 0x5B //Default I2C Address
//#define CCS811_ADDR 0x5A //Alternate I2C Address

//Global sensor objects
CCS811 myCCS811(CCS811_ADDR);
BME280 myBME280;

void setup()
{
  Serial.begin(9600);
  Serial.println();
  Serial.println("Apply BME280 data to CCS811 for compensation.");

  //This begins the CCS811 sensor and prints error status of .begin()
  CCS811Core::status returnCode = myCCS811.begin();
  if (returnCode != CCS811Core::SENSOR_SUCCESS)
  {
    Serial.println("Problem with CCS811");
    printDriverError(returnCode);
  }
  else
  {
    Serial.println("CCS811 online");
  }

  //Initialize BME280
  //For I2C, enable the following and disable the SPI section
  myBME280.settings.commInterface = I2C_MODE;
  myBME280.settings.I2CAddress = 0x77;
  myBME280.settings.runMode = 3; //Normal mode
  myBME280.settings.tStandby = 0;
  myBME280.settings.filter = 4;
  myBME280.settings.tempOverSample = 5;
  myBME280.settings.pressOverSample = 5;
  myBME280.settings.humidOverSample = 5;

  //Calling .begin() causes the settings to be loaded
  delay(10);  //Make sure sensor had enough time to turn on. BME280 requires 2ms to start up.
  byte id = myBME280.begin(); //Returns ID of 0x60 if successful
  if (id != 0x60)
  {
    Serial.println("Problem with BME280");
  }
  else
  {
    Serial.println("BME280 online");
  }
}

void loop()
{
  if (myCCS811.dataAvailable()) //Check to see if CCS811 has new data (it's the slowest sensor)
  {
    myCCS811.readAlgorithmResults(); //Read latest from CCS811 and update tVOC and CO2 variables
    //getWeather(); //Get latest humidity/pressure/temp data from BME280
    printData(); //Pretty print all the data
  }
  else if (myCCS811.checkForStatusError()) //Check to see if CCS811 has thrown an error
  {
    Serial.println(myCCS811.getErrorRegister()); //Prints whatever CSS811 error flags are detected
  }

  delay(2000); //Wait for next reading
}

void printData()
{
  //Print Module Name
  Serial.print("Environmental_Combo Module; ");
  Serial.print(" CO2 = ");
  Serial.print(myCCS811.getCO2());
  Serial.print("ppm, ");

  Serial.print("TVOC = ");
  Serial.print(myCCS811.getTVOC());
  Serial.print("ppb, ");

  Serial.print("Temp = ");
  Serial.print(myBME280.readTempC(), 1);
  Serial.print("C, ");

  Serial.print("pressure = ");
  Serial.print(myBME280.readFloatPressure(), 2);
  Serial.print("Pa, ");

  //Serial.print(" pressure[");
  //Serial.print((myBME280.readFloatPressure() * 0.0002953), 2);
  //Serial.print("]InHg");

  //Serial.print("altitude[");
  //Serial.print(myBME280.readFloatAltitudeMeters(), 2);
  //Serial.print("]m");

  //Serial.print("altitude[");
  //Serial.print(myBME280.readFloatAltitudeFeet(), 2);
  //Serial.print("]ft");

  Serial.print("humidity = ");
  Serial.print(myBME280.readFloatHumidity(), 0);
  Serial.print("% ");

  Serial.println();
}

void printDriverError( CCS811Core::status errorCode )
{
  switch ( errorCode )
  {
    case CCS811Core::SENSOR_SUCCESS:
      Serial.print("SUCCESS");
      break;
    case CCS811Core::SENSOR_ID_ERROR:
      Serial.print("ID_ERROR");
      break;
    case CCS811Core::SENSOR_I2C_ERROR:
      Serial.print("I2C_ERROR");
      break;
    case CCS811Core::SENSOR_INTERNAL_ERROR:
      Serial.print("INTERNAL_ERROR");
      break;
    case CCS811Core::SENSOR_GENERIC_ERROR:
      Serial.print("GENERIC_ERROR");
      break;
    default:
      Serial.print("Unspecified error.");
  }
} 
 
 #define TARGET_TEMP 65.5
  #define MINTEMP 63
  #define MAXTEMP 68
  // time of the experiment in minutes
  #define TIMEmin 45
*/
const float TARGET_TEMP = 65.6;
const float MINTEMP = 63;
const float MAXTEMP = 68;
// time of the experiment in minutes
#define TIMEmin 45
  
// thermistor block
// which analog pin to connect
#define THERMISTORPIN A0   
// resistance at 25 degrees C
#define THERMISTORNOMINAL 100000
// temp. for nominal resistance (almost always 25 C)
#define TEMPERATURENOMINAL 25   
// how many samples to take and average, more takes longer
// but is more 'smooth'
#define NUMSAMPLES 4
// The beta coefficient of the thermistor (usually 3000-4000)
#define BCOEFFICIENT 3950
// the value of the 'other' resistor
#define SERIESRESISTOR 100000
// 0 Voltage setting in cycle zone C and if stable zone temp is exceeded.
unsigned const int Temp0 = 0;
// de- or increment of voltage setting if temp is off (zone B,D&F)
unsigned const int HeatAdjust = 10;
// tolerated difference between current and desired temp
const float HeatTolerance = 0.1;
// Initial value of the PWM signal sent to the thermistor gate
int Set = 0;
// the pin for controlling the MOSFET - heating coil   
#define heatingPin 5
// the pin of the green LED
#define greenLED 7
// the pin of the red LED
#define redLED 8
//converts the time from minutes to milliseconds
float TIME = TIMEmin * 60000;
// this setup uses 30/40mA
int samples[NUMSAMPLES];
  
void setup(void) {
  // for the arduino serial monitor
  Serial.begin(9600);
  // pinmodes   
  pinMode(heatingPin, OUTPUT);
  pinMode(greenLED, OUTPUT);
  pinMode(redLED, OUTPUT);
}
void loop(void) {
  uint8_t i;
  float average;
  // take N samples in a row, with a slight delay
  for (i = 0; i < NUMSAMPLES; i++) {
    samples[i] = analogRead(THERMISTORPIN);
    delay(10);
  }
  // average all the samples out
  average = 0;
  for (i = 0; i < NUMSAMPLES; i++) {
    average += samples[i];
  }
  average /= NUMSAMPLES;
  // convert the value to resistance
  average = 1023 / average - 1;
  average = SERIESRESISTOR / average;
  // "steinhart" is the temperature reading converted in °C
  float steinhart;
  steinhart = average / THERMISTORNOMINAL; // (R/Ro)
  steinhart = log(steinhart); // ln(R/Ro)
  steinhart /= BCOEFFICIENT; // 1/B * ln(R/Ro)
  steinhart += 1.0 / (TEMPERATURENOMINAL + 273.15); // + (1/To)
  steinhart = 1.0 / steinhart; // Invert
  steinhart -= 273.15; // convert to C
  // delay between the measuerements, in milliseconds
  delay(1000);
  // print the seconds and the temperature in the serial monitor
  Serial.print(millis() / 1000);
  Serial.print(",");
  Serial.print(steinhart);
  Serial.print(",");
  /*
    // if the temperature is lower than variable TEMP the program switches on the heating coil, if
    higher than variable TEMP then it switches it off.
    // In the serial monitor it prints 0 if the coil is off, and 1 if the coil is on
    if (steinhart >= TARGET_TEMP) {
    Serial.print("0,");
    analogWrite(heatingPin, 0);
    } else {
    Serial.print("1,");
    // heatingpin 100 = 370mA, 130=500mA, 150=580mA for a 5cm 200um nichrome coil
    analogWrite(heatingPin, 130);
    }

  */
  // void checkHeating(float TARGET_TEMP, int Set){
  float CurrentT = steinhart;
  if (CurrentT <= (TARGET_TEMP - HeatTolerance)) {
    Set += HeatAdjust;
    if (Set > 255) {
      Set = 255;
    }
  } else {
    if (CurrentT >= (TARGET_TEMP - HeatTolerance)) {
      Set = 0;
    } else {};
  };
  analogWrite(heatingPin, Set);
  Serial.println(Set);
  // LED user feedback. If the temperature is between MINTEMP and MAXTEMP, the program turns on the green LED, in the other cases, it turns on the red LED   
  if (steinhart > MINTEMP && steinhart < MAXTEMP) {
    digitalWrite(greenLED, HIGH);
    digitalWrite(redLED, LOW);
  }
  else {
    digitalWrite(greenLED, LOW);
    digitalWrite(redLED, HIGH);
  }
  // LED user feedback. After TIME both LEDs are turned on.
  if (millis() > TIME ) {
    digitalWrite(greenLED, HIGH);
    digitalWrite(redLED, HIGH);
  }
  else {
  }

}
